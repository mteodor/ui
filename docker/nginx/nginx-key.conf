# Copyright (c) Mainflux
# SPDX-License-Identifier: Apache-2.0

# This is the default Mainflux NGINX configuration.



    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;

        include snippets/ssl.conf;

        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-Content-Type-Options nosniff;
        add_header Access-Control-Allow-Origin '*';
        add_header Access-Control-Allow-Methods '*';
        add_header Access-Control-Allow-Headers '*';

        server_name localhost;

        # Proxy pass to users service
        # location ~ ^/(users|tokens|password) {
        #     include snippets/proxy-headers.conf;
        #     body_filter_by_lua_block {
        #         local cjson = require "cjson"
        #         ngx.log(ngx.ERR, "NGX URI: ", ngx.var.uri)
                
        #     }
        #     proxy_pass http://users:${MF_USERS_HTTP_PORT};
        # }

        # Proxy pass to users service
        location ~ ^/(users|password) {
            include snippets/proxy-headers.conf;
            access_by_lua_block {
                local session = require "resty.session".open()
                if session then 
                    ngx.log(ngx.ERR, "SESSION CREATED, JWT: ", session.data.jwt)
                end
            }
            proxy_pass http://users:${MF_USERS_HTTP_PORT};
        }

        # Proxy pass to users service
        location /tokens {
            include snippets/proxy-headers.conf;
            content_by_lua_block {
                ngx.req.read_body()
                local res = ngx.location.capture(
                    "/_tokens",
                    {always_forward_body = true, method = ngx.HTTP_POST})
				if res.status == 201 then
                    ngx.log(ngx.ERR, "LOGIN: STATUS OK")
                    local cjson = require "cjson"
                    local body = res.body
				    local value = cjson.decode(body)
					ngx.status = res.status
                    local session = require "resty.session".open() 
                    if not session then
                        session = require "resty.session".start()
                    end
                    session.data.jwt = value.token
                    session:save()
					ngx.print(res.body)
                    ngx.exit(res.status)
				else
                    ngx.log(ngx.ERR, "STATUS ERR", res.status)
					ngx.print(res.body)
				end
                ngx.exit(501)
            }
        }

        location /_tokens {
            include snippets/proxy-headers.conf;
            proxy_pass http://users:${MF_USERS_HTTP_PORT}/tokens;
        }


        location /groups/users/ {
            include snippets/proxy-headers.conf;
            proxy_pass http://users:${MF_USERS_HTTP_PORT}/groups/;
        }

        # Proxy pass to things service
        location ~ ^/(things|channels|connect) {
            include snippets/proxy-headers.conf;
            add_header Access-Control-Expose-Headers Location;
            access_by_lua_block {
                local session = require "resty.session".open()
                ngx.log(ngx.ERR, "SESSION USED: ", session.data.jwt)
            }
            body_filter_by_lua_block {
                ngx.log(ngx.ERR, "NGX URI: ", ngx.var.uri)
                if ngx.var.uri == "/things" then
                    
                    ngx.log(ngx.ERR, "ngx[0]: ", ngx.arg[0])
                    ngx.log(ngx.ERR, "ngx[1]: ", ngx.arg[1])
                    ngx.log(ngx.ERR, "ngx[2]: ", ngx.arg[2])
                end
            }
            proxy_pass http://things:${MF_THINGS_HTTP_PORT};
        }

        location /groups/things/ {
            include snippets/proxy-headers.conf;
            add_header Access-Control-Expose-Headers Location;
            proxy_pass http://things:${MF_THINGS_HTTP_PORT}/groups/;
        }

        location ~ ^/(identify){
            include snippets/proxy-headers.conf;
            add_header Access-Control-Expose-Headers Location;
            proxy_pass http://things:${MF_THINGS_AUTH_HTTP_PORT};
        }

        location ~ ^/(groups|members|keys) {
            include snippets/proxy-headers.conf;
            add_header Access-Control-Expose-Headers Location;
            proxy_pass http://auth:${MF_AUTH_HTTP_PORT};
        }

        location /version {
            include snippets/proxy-headers.conf;
            proxy_pass http://things:${MF_THINGS_HTTP_PORT};
        }

        # Proxy pass to mainflux-http-adapter
        location /http/ {
            include snippets/proxy-headers.conf;

            # Trailing `/` is mandatory. Refer to the http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass
            # If the proxy_pass directive is specified with a URI, then when a request is passed to the server,
            # the part of a normalized request URI matching the location is replaced by a URI specified in the directive
            proxy_pass http://http-adapter:${MF_HTTP_ADAPTER_PORT}/;
        }

        # Proxy pass to mainflux-mqtt-adapter over WS
        location /mqtt {
            include snippets/proxy-headers.conf;
            include snippets/ws-upgrade.conf;
            proxy_pass http://mqtt_ws_cluster;
        }

        # Proxy pass to mainflux-influxdb-reader
        location /reader/ {
            include snippets/proxy-headers.conf;
            proxy_pass http://influxdb-reader:${MF_INFLUX_READER_PORT}/;
        }

        # Proxy pass to mainflux-bootstrap
        location /bootstrap/ {
            include snippets/proxy-headers.conf;
            proxy_pass http://bootstrap:${MF_BOOTSTRAP_PORT}/;
        }

        # Proxy pass to mainflux-opcua-adapter
        location /browse {
            include snippets/proxy-headers.conf;
            proxy_pass http://opcua-adapter:${MF_OPCUA_ADAPTER_HTTP_PORT};
        }

        # Proxy pass to mainflux-twins
        location ~ ^/(twins|states) {
            include snippets/proxy-headers.conf;
            proxy_pass http://twins:${MF_TWINS_HTTP_PORT};
        }

        location / {
            include snippets/proxy-headers.conf;
            proxy_pass http://ui:${MF_UI_PORT};
        }

        location /grafana {
            include snippets/proxy-headers.conf;
            access_by_lua_block {
                
                local session = require "resty.session".open()
                if not session then
                    ngx.log(ngx.ERR, "request failed, session not created")
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end

                if not session.data.jwt then
                    ngx.log(ngx.ERR, "request failed, session not authenticated")
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end
                
                ngx.log(ngx.ERR, "SESSION USED: ", session.data.jwt)
                ngx.log(ngx.ERR, "AUTHORIZATION:", ngx.req.get_headers()["Authorization"])
                ngx.log(ngx.ERR, "GRAFANA SESSION:", ngx.req.get_headers()["grafana_session"])
                ngx.log(ngx.ERR, "COOKIE: ", ngx.req.get_headers()["Cookie"])
                ngx.log(ngx.ERR, "URI: ", ngx.var.uri)
                ngx.log(ngx.ERR, "ARGS: ", ngx.var.args)

                local cjson = require "cjson"
                
                ngx.req.set_header("Authorization", session.data.jwt)

                if  ngx.req.get_uri_args()["var-thing"] then
                    local thingpath = "/things/" .. ngx.req.get_uri_args()["var-thing"]
                    
                    local res = ngx.location.capture(thingpath, { method = ngx.HTTP_GET})
                    
                    if not res  then
                        ngx.log(ngx.ERR, "request failed: ", err)
                        ngx.exit(ngx.HTTP_FORBIDDEN)
                    end
                    if not res.status == ngx.HTTP_OK then 
                        ngx.log(ngx.ERR, "request failed: ", err)
                        ngx.exit(res.status)
                    end

                    local thing = cjson.decode(res.body)
                    ngx.log(ngx.ERR, "THING ID: ", thing.id)
                    ngx.log(ngx.ERR, "THING DASH: ", thing.metadata.grafana.dashboard)
                end


                local res = ngx.location.capture("/users/profile", 
                            { method = ngx.HTTP_GET })
                if not res then
                    ngx.log(ngx.ERR, "request failed: ", err)
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end

                ngx.log(ngx.ERR, "USER:", res.body)
                local user = cjson.decode(res.body)
                ngx.log(ngx.ERR, "EMAIL:", user.email)
                ngx.req.set_header("X-WEBAUTH-USER", user.email)
            }
            
            proxy_pass http://grafana:3000;
            proxy_set_header Referer $scheme://$host/grafana;
        }


        # location /grafana/ {
        #     include snippets/proxy-headers.conf;
        #     proxy_pass http://grafana:3000/;
        #     proxy_set_header Referer $scheme://$host/grafana;
        # }


    }


